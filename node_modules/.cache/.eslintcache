[{"E:\\blogandtable\\src\\index.tsx":"1","E:\\blogandtable\\src\\App.tsx":"2","E:\\blogandtable\\src\\components\\Footer\\Footer.tsx":"3","E:\\blogandtable\\src\\containers\\BlogPage\\BlogPage.tsx":"4","E:\\blogandtable\\src\\containers\\LoginPage\\LoginPage.tsx":"5","E:\\blogandtable\\src\\containers\\NoMatch\\NoMatch.tsx":"6","E:\\blogandtable\\src\\shared\\projectData.ts":"7","E:\\blogandtable\\src\\containers\\BlogPage\\components\\AddPostForm.tsx":"8","E:\\blogandtable\\src\\containers\\BlogPage\\components\\BlogCard.tsx":"9","E:\\blogandtable\\src\\containers\\BlogPage\\components\\EditPostForm.tsx":"10","E:\\blogandtable\\src\\components\\Header\\Header.tsx":"11"},{"size":194,"mtime":1637512976422,"results":"12","hashOfConfig":"13"},{"size":1863,"mtime":1637663860347,"results":"14","hashOfConfig":"13"},{"size":296,"mtime":1637664698885,"results":"15","hashOfConfig":"13"},{"size":6201,"mtime":1637529840898,"results":"16","hashOfConfig":"13"},{"size":1918,"mtime":1637664353060,"results":"17","hashOfConfig":"13"},{"size":718,"mtime":1637661664681,"results":"18","hashOfConfig":"13"},{"size":1179,"mtime":1637513199353,"results":"19","hashOfConfig":"13"},{"size":2342,"mtime":1637661722913,"results":"20","hashOfConfig":"13"},{"size":1241,"mtime":1637661747072,"results":"21","hashOfConfig":"13"},{"size":2539,"mtime":1637661762267,"results":"22","hashOfConfig":"13"},{"size":1227,"mtime":1637529892148,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"kl8yw6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"E:\\blogandtable\\src\\index.tsx",[],["49","50"],"E:\\blogandtable\\src\\App.tsx",["51"],"import React,{ useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport BlogPage from './containers/BlogPage/BlogPage';\r\nimport LoginPage from './containers/LoginPage/LoginPage';\r\nimport NoMatch from './containers/NoMatch/NoMatch';\r\n\r\nconst App = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(\r\n    localStorage.getItem('isLoggedIn') === 'true'\r\n  );\r\n  const [userName, setUserName] = useState<any>(localStorage.getItem('userName'));\r\n\r\n  return (\r\n    <Router>\r\n      <div className='App'>\r\n        <main>\r\n          <Switch>\r\n            <Route exact path='/' render={() => <Redirect to='/blog' />} />\r\n\r\n            <Route exact path='/login'>\r\n              <LoginPage\r\n                setIsLoggedIn={setIsLoggedIn}\r\n                setUserName={setUserName}\r\n              />\r\n            </Route>\r\n\r\n            <Route exact path='/blog'>\r\n              <BlogPage\r\n                userName={userName}\r\n                isLoggedIn={isLoggedIn}\r\n                //@ts-ignore\r\n                setIsLoggedIn={setIsLoggedIn}\r\n              />\r\n            </Route>\r\n\r\n            <Route exact path='/404'>\r\n              <NoMatch />\r\n            </Route>\r\n\r\n            <Route\r\n              path='*'\r\n              render={({ location }) => {\r\n                return (\r\n                  <Redirect\r\n                    to={{\r\n                      pathname: '/404',\r\n                      from: location,\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n          </Switch>\r\n        </main>\r\n\r\n        <Footer year={new Date().getFullYear()} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\nexport default App","E:\\blogandtable\\src\\components\\Footer\\Footer.tsx",[],"E:\\blogandtable\\src\\containers\\BlogPage\\BlogPage.tsx",["52"],"import axios from 'axios';\r\nimport React ,{ useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport './BlogPage.css';\r\nimport AddPostForm from './components/AddPostForm';\r\nimport BlogCard from './components/BlogCard';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport EditPostForm from './components/EditPostForm';\r\nimport { postsUrl } from '../../shared/projectData';\r\nimport Header from '../../components/Header/Header';\r\nimport { Pagination } from 'antd';\r\n\r\nlet source: any;\r\n\r\ninterface BlogPageProps{\r\n  userName: string;\r\n  isLoggedIn: boolean;\r\n  setIsLoggedIn: (blogPost: IPost) => void;\r\n}\r\n\r\nexport interface IPost{\r\n  id?: number;\r\n  title?: string;\r\n  description?: string;\r\n  date?: any;\r\n  liked?: boolean;\r\n}\r\n\r\nconst BlogPage: React.FC<BlogPageProps> = ({ userName, isLoggedIn, setIsLoggedIn }) => {\r\n\r\n  const [showAddForm, setShowAddForm] = useState<boolean>(false);\r\n  const [showEditForm, setShowEditForm] = useState<boolean>(false);\r\n  const [blogArr, setBlogArr] = useState<any[]>([]);\r\n  const [isPending, setIsPending] = useState<boolean>(false);\r\n  const [selectedPost, setSelectedPost] = useState<any>({});\r\n\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const [totalElementsCount, setTotalElementsCount] = useState<number>(0);\r\n  const [currentPageElements, setCurrentPageElements] = useState<number[]>([])\r\n  let nedValue: any = location?.search.split('=')[1];\r\n  const elementsPerPage = 2;\r\n  const [offset, setOffset] = useState(nedValue * elementsPerPage || 0);\r\n  const pagesCount = Math.ceil(totalElementsCount / elementsPerPage);\r\n\r\n  const fetchPosts = () => {\r\n    source = axios.CancelToken.source();\r\n    axios\r\n      .get(postsUrl, { cancelToken: source.token })\r\n      .then((response) => {\r\n        setBlogArr(response.data);\r\n        setTotalElementsCount(response.data.length);\r\n        setCurrentPageElements(response.data.slice(offset, offset + elementsPerPage))\r\n        setIsPending(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handlePageClick = (pageNumber: number) => {\r\n    const offset = (pageNumber - 1) * elementsPerPage;\r\n    history.push(`/blog?page=${pageNumber}`)\r\n    setOffset(offset);\r\n    setCurrentPageElements(blogArr.slice(offset, offset + elementsPerPage))\r\n  };\r\n\r\n  console.log(offset)\r\n\r\n  useEffect(() => {\r\n    fetchPosts();\r\n    return () => {\r\n      if (source) {\r\n        source.cancel('Axios get canceled');\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const deletePost = (blogPost: IPost) => {\r\n    if (window.confirm(`Удалить ${blogPost.title}?`)) {\r\n      setIsPending(true);\r\n      axios\r\n        .delete(`${postsUrl}${blogPost.id}`)\r\n        .then((response) => {\r\n          console.log('Пост удален => ', response.data);\r\n          fetchPosts();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const addNewBlogPost = (blogPost: IPost) => {\r\n    setIsPending(true);\r\n    axios\r\n      .post(postsUrl, blogPost)\r\n      .then((response) => {\r\n        console.log('Пост создан =>', response.data);\r\n        fetchPosts();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const editBlogPost = (updatedBlogPost: IPost) => {\r\n    setIsPending(true);\r\n    axios\r\n      .put(`${postsUrl}${updatedBlogPost.id}`, updatedBlogPost)\r\n      .then((response) => {\r\n        console.log('Пост отредактирован =>', response.data);\r\n        fetchPosts();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleAddFormShow = () => {\r\n    setShowAddForm(true);\r\n  };\r\n\r\n  const handleAddFormHide = () => {\r\n    setShowAddForm(false);\r\n  };\r\n\r\n  const handleEditFormShow = () => {\r\n    setShowEditForm(true);\r\n  };\r\n\r\n  const handleEditFormHide = () => {\r\n    setShowEditForm(false);\r\n  };\r\n\r\n  const handleSelectPost = (blogPost: IPost) => {\r\n    setSelectedPost(blogPost);\r\n  };\r\n\r\n  const isAdmin = isLoggedIn && userName === 'admin';\r\n\r\n  const blogPosts = currentPageElements.map((item: any) => {\r\n    return (\r\n      <BlogCard\r\n        key={item?.id}\r\n        title={item?.title}\r\n        description={item?.description}\r\n        date={item?.date}\r\n        deletePost={() => deletePost(item)}\r\n        handleEditFormShow={handleEditFormShow}\r\n        handleSelectPost={() => handleSelectPost(item)}\r\n        isAdmin={isAdmin}\r\n      />\r\n    );\r\n  });\r\n\r\n  if (currentPageElements.length === 0) return <h1>Загружаю данные...</h1>;\r\n\r\n  const postsOpactiy = isPending ? 0.5 : 1;\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        userName={userName}\r\n        isLoggedIn={isLoggedIn}\r\n        setIsLoggedIn={setIsLoggedIn}\r\n      />\r\n      <div className='blogPage'>\r\n        \r\n        {\r\n        showAddForm && (\r\n          <AddPostForm\r\n            //@ts-ignore\r\n            blogArr={blogArr}\r\n            addNewBlogPost={addNewBlogPost}\r\n            handleAddFormHide={handleAddFormHide}\r\n          />\r\n        )}\r\n\r\n        {showEditForm && (\r\n          <EditPostForm\r\n            handleEditFormHide={handleEditFormHide}\r\n            selectedPost={selectedPost}\r\n            editBlogPost={editBlogPost}\r\n          />\r\n        )}\r\n        <>\r\n          <h1>Блог</h1>\r\n\r\n          {isAdmin && (\r\n            <div className='addNewPost'>\r\n              <button className='blackBtn' onClick={handleAddFormShow}>\r\n                Создать новый пост\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          <div className='posts' style={{ opacity: postsOpactiy }}>\r\n            {blogPosts}\r\n            {pagesCount > 1 && (\r\n              <Pagination\r\n                defaultCurrent={location?.search.split('=')[1] || 1}\r\n                onChange={handlePageClick}\r\n                total={totalElementsCount}\r\n                pageSize={elementsPerPage}\r\n                showSizeChanger={false}\r\n              />\r\n            )}\r\n          </div>\r\n          {isPending && <CircularProgress className='preloader' />}\r\n        </>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default BlogPage;","E:\\blogandtable\\src\\containers\\LoginPage\\LoginPage.tsx",[],"E:\\blogandtable\\src\\containers\\NoMatch\\NoMatch.tsx",[],"E:\\blogandtable\\src\\shared\\projectData.ts",[],"E:\\blogandtable\\src\\containers\\BlogPage\\components\\AddPostForm.tsx",[],"E:\\blogandtable\\src\\containers\\BlogPage\\components\\BlogCard.tsx",[],"E:\\blogandtable\\src\\containers\\BlogPage\\components\\EditPostForm.tsx",[],"E:\\blogandtable\\src\\components\\Header\\Header.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":9,"column":8,"nodeType":"59","messageId":"60","endLine":9,"endColumn":14},{"ruleId":"61","severity":1,"message":"62","line":78,"column":6,"nodeType":"63","endLine":78,"endColumn":8,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [fetchPosts]",{"range":"70","text":"71"},[2561,2563],"[fetchPosts]"]