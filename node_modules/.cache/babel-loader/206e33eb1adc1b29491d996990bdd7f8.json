{"ast":null,"code":"import _initializerDefineProperty from \"E:/blogandtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"E:/blogandtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"E:/blogandtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport axios from 'axios';\nimport { observable, computed, action } from 'mobx';\nimport stores from '../stores';\nlet CurrenciesStore = (_class = class CurrenciesStore {\n  constructor() {\n    _initializerDefineProperty(this, \"items\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"diffObj\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"setItems\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"fetchCoins\", _descriptor4, this);\n  }\n\n  get getItems() {\n    return this.items;\n  }\n\n  get getDiffObj() {\n    return this.diffObj;\n  }\n\n  diffCurrencies(arr1, arr2) {\n    return arr1.filter((obj, index) => {\n      if (obj.price !== arr2[index].price) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"diffObj\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getItems\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getItems\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getDiffObj\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getDiffObj\"), _class.prototype), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"setItems\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return items => {\n      this.diffObj = this.diffCurrencies(this.items, items).reduce((initObj, obj) => {\n        const newObj = items.find(o => o.name === obj.name);\n        const oldObj = this.items.find(itemObj => itemObj.name === newObj.name);\n        const color = newObj.price === oldObj.price ? '' : newObj.price > oldObj.price ? 'green' : 'red';\n        initObj[newObj.name] = color;\n        return initObj;\n      }, {});\n      this.items = items;\n      setTimeout(() => {\n        this.diffObj = {};\n      }, 10000);\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"fetchCoins\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      axios.get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD').then(({\n        data\n      }) => {\n        const coins = data.Data.map(coin => {\n          const obj = {\n            name: coin.CoinInfo.Name,\n            fullName: coin.CoinInfo.FullName,\n            imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\n            price: coin.RAW.USD.PRICE.toFixed(3),\n            volume24Hour: parseInt(coin.RAW.USD.VOLUME24HOUR)\n          };\n          return obj;\n        });\n        this.setItems(coins);\n        stores.converterStore.setSelectedCoin(coins[0]);\n      });\n    };\n  }\n})), _class);\nexport default CurrenciesStore;","map":{"version":3,"sources":["E:/blogandtable/src/store/currenciesStore.ts"],"names":["axios","observable","computed","action","stores","CurrenciesStore","getItems","items","getDiffObj","diffObj","diffCurrencies","arr1","arr2","filter","obj","index","price","reduce","initObj","newObj","find","o","name","oldObj","itemObj","color","setTimeout","get","then","data","coins","Data","map","coin","CoinInfo","Name","fullName","FullName","imageUrl","ImageUrl","RAW","USD","PRICE","toFixed","volume24Hour","parseInt","VOLUME24HOUR","setItems","converterStore","setSelectedCoin"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { observable, computed, action } from 'mobx';\r\nimport { TCoin, TCoinDiff } from '../types';\r\n\r\nimport stores from '../stores';\r\n\r\nclass CurrenciesStore {\r\n  @observable private items: TCoin[] = [];\r\n  @observable private diffObj: TCoinDiff = {};\r\n\r\n  @computed\r\n  get getItems() {\r\n    return this.items;\r\n  }\r\n\r\n  @computed\r\n  get getDiffObj() {\r\n    return this.diffObj;\r\n  }\r\n\r\n  @action\r\n  setItems = (items: TCoin[]): void => {\r\n    this.diffObj = this.diffCurrencies(this.items, items).reduce(\r\n      (initObj: TCoinDiff, obj: TCoin) => {\r\n        const newObj: TCoin = items.find(o => o.name === obj.name)!;\r\n        const oldObj: TCoin = this.items.find(itemObj => itemObj.name === newObj.name)!;\r\n        const color: string =\r\n          newObj.price === oldObj.price ? '' : newObj.price > oldObj.price ? 'green' : 'red';\r\n\r\n        initObj[newObj.name] = color;\r\n\r\n        return initObj;\r\n      },\r\n      {},\r\n    );\r\n    this.items = items;\r\n    setTimeout(() => {\r\n      this.diffObj = {};\r\n    }, 10000);\r\n  };\r\n\r\n  @action\r\n  fetchCoins = () => {\r\n    axios\r\n      .get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\r\n      .then(({ data }) => {\r\n        const coins: TCoin[] = data.Data.map((coin: any) => {\r\n          const obj: TCoin = {\r\n            name: coin.CoinInfo.Name,\r\n            fullName: coin.CoinInfo.FullName,\r\n            imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n            price: coin.RAW.USD.PRICE.toFixed(3),\r\n            volume24Hour: parseInt(coin.RAW.USD.VOLUME24HOUR),\r\n          };\r\n          return obj;\r\n        });\r\n        this.setItems(coins);\r\n        stores.converterStore.setSelectedCoin(coins[0]);\r\n      });\r\n  };\r\n\r\n  diffCurrencies(arr1: TCoin[], arr2: TCoin[]) {\r\n    return arr1.filter((obj, index) => {\r\n      if (obj.price !== arr2[index].price) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n}\r\n\r\nexport default CurrenciesStore;"]},"metadata":{},"sourceType":"module"}